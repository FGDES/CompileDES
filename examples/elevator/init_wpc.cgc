% Code Generator Configuration for Elevator Laboratory Experiment

% Target: Embedded C for WAGO IPC


<CodeGenerator name="Init_2016_04">


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
% 1. Specify generators

<Generators>

% close door 0
<Generator name="initDoor0">    
<TransRel>
1  d0_arcl   4
1  d0_cl     2          
2  d0_arcl   3          
2  dtick     3          
3  d0_stp    4
4  dtick     4          
</TransRel>
<InitStates> 1 </InitStates>
</Generator>


% close door 1
<Generator name="initDoor1">    
<TransRel>
1  d1_arcl   4
1  d1_cl     2          
2  d1_arcl   3          
2  dtick     3          
3  d1_stp    4
4  dtick     4          
</TransRel>
<InitStates> 1 </InitStates>
</Generator>


% close door 2
<Generator name="initDoor2">    
<TransRel>
1  d2_arcl   4
1  d2_cl     2          
2  d2_arcl   3          
2  dtick     3          
3  d2_stp    4
4  dtick     4          
</TransRel>
<InitStates> 1 </InitStates>
</Generator>

% operate cabin
<Generator name="cabin">    
<TransRel>
% blink 
1  c_slw      2
2  l0_upon    3
3  l2_downon  4
4  b0_up     10
4  b2_down   20 
4  btick      5
5  l0_upoff   6
6  l2_downoff 7
7  b0_up     10
7  b2_down   20 
7  btick      2
% cabin down     
10 l0_upon    11
11 l2_downoff 12
12 c_down     13
13 btick      13
13 c_ar2      13
13 c_lv2      13
13 c_ar0      15
13 c_lv0      15
13 b0_rel     15
15 c_stp       2
% cabin up
20 l0_upoff  21
21 l2_downon 22
22 c_up      23
23 btick     23
23 c_ar0     23
23 c_lv0     23
23 c_ar2     25
23 c_lv2     25
23 b2_rel    25
25 c_stp      2
</TransRel>
<InitStates> 1 </InitStates>
</Generator>

</Generators> 
 


 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
% 2. Specify event execution semantics
<EventConfiguration>

%%%%%%%%%  input events

%%% Cabin sensor: arrive at floor 0 
<Event name="c_ar0"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[0] &amp; (1&lt;&lt;0)" +PosEdge+ </Triggers> </Input> </Event>
  
%%% Cabin sensor: leave floor 0          
<Event name="c_lv0"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[0] &amp; (1&lt;&lt;0)" +NegEdge+ </Triggers> </Input> </Event>

%%% Cabin sensor: arrive at floor 2          
<Event name="c_ar2"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[0] &amp; (1&lt;&lt;2)" +PosEdge+ </Triggers> </Input> </Event>

%%% Cabin sensor: leave floor 2 
<Event name="c_lv2"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[0] &amp; (1&lt;&lt;2)" +NegEdge+ </Triggers> </Input> </Event>

%%% Cabin sensor: arrive slow sensor floor 0 from top         
<Event name="c_slwtop0"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[0] &amp; (1&lt;&lt;3)" +PosEdge+ </Triggers> </Input> </Event>

%%% Cabin sensor: arrive slow sensor floor 2 from bottom
<Event name="c_slwbot2"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[0] &amp; (1&lt;&lt;6)" +PosEdge+ </Triggers> </Input> </Event>

%%% Door sensor: door floor 0 reached closed position
<Event name="d0_arcl"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[1] &amp; (1&lt;&lt;0)" +PosEdge+ </Triggers> </Input> </Event>

%%% Door sensor: door floor 0 leaving closed position
<Event name="d0_lvcl"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[1] &amp; (1&lt;&lt;0)" +NegEdge+ </Triggers> </Input> </Event>

%%% Door sensor: door floor 0 reached open position
<Event name="d0_arop"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[0] &amp; (1&lt;&lt;7)" +NegEdge+ </Triggers> </Input> </Event>

%%% Door sensor: door floor 0 leaving open position
<Event name="d0_lvop"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[0] &amp; (1&lt;&lt;7)" +PosEdge+ </Triggers> </Input> </Event>

%%% Door sensor: door floor 1 reached closed position
<Event name="d1_arcl"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[1] &amp; (1&lt;&lt;2)" +PosEdge+ </Triggers> </Input> </Event>

%%% Door sensor: door floor 1 leaving closed position
<Event name="d1_lvcl"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[1] &amp; (1&lt;&lt;2)" +NegEdge+ </Triggers> </Input> </Event>

%%% Door sensor: door floor 1 reached open position
<Event name="d1_arop"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[1] &amp; (1&lt;&lt;1)" +NegEdge+ </Triggers> </Input> </Event>

%%% Door sensor: door floor 1 leaving open position
<Event name="d1_lvop"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[1] &amp; (1&lt;&lt;1)" +PosEdge+ </Triggers> </Input> </Event>

%%% Door sensor: door floor 2 reached closed position
<Event name="d2_arcl"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[1] &amp; (1&lt;&lt;4)" +PosEdge+ </Triggers> </Input> </Event>

%%% Door sensor: door floor 2 leaving closed position
<Event name="d2_lvcl"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[1] &amp; (1&lt;&lt;4)" +NegEdge+ </Triggers> </Input> </Event>

%%% Door sensor: door floor 2 reached open position
<Event name="d2_arop"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[1] &amp; (1&lt;&lt;3)" +NegEdge+ </Triggers> </Input> </Event>

%%% Door sensor: door floor 2 leaving open position
<Event name="d2_lvop"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[1] &amp; (1&lt;&lt;3)" +PosEdge+ </Triggers> </Input> </Event>

%%% Opertor sensor: call button up at floor 0 pressed
<Event name="b0_up"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[2] &amp; (1&lt;&lt;0)" +PosEdge+ </Triggers> </Input> </Event>

%%% Opertor sensor: call button up at floor 0 released
<Event name="b0_rel"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[2] &amp; (1&lt;&lt;0)" +NegEdge+ </Triggers> </Input> </Event>

%%% Opertor sensor: call button down at floor 2 pressed
<Event name="b2_down"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[2] &amp; (1&lt;&lt;3)" +PosEdge+ </Triggers> </Input> </Event>

%%% Opertor sensor: call button down at floor 2 released
<Event name="b2_rel"> <Input> <Priority val="100"/> <Triggers> "pimg_inputs[2] &amp; (1&lt;&lt;3)" +NegEdge+ </Triggers> </Input> </Event>


%%%%%%%%%  output events

%%% Cabin actuator: start motor upwards 
<Event name="c_up"> <Output> <Priority val="100"/> <Actions> "{pimg_outputs[0] &amp;= ~(1&lt;&lt;1); pimg_outputs[0] |= (1&lt;&lt;0);}" +Execute+ </Actions> </Output> </Event>

%%% Cabin actuator: start motor downwards 
<Event name="c_down"> <Output> <Priority val="100"/> <Actions> "{pimg_outputs[0] &amp;= ~(1&lt;&lt;0); pimg_outputs[0] |= (1&lt;&lt;1);}" +Execute+ </Actions> </Output> </Event>

%%% Cabin actuator: stop motor 
<Event name="c_stp"> <Output> <Priority val="100"/> <Actions> "pimg_outputs[0] &amp;= ~((1&lt;&lt;0) | (1&lt;&lt;1))" +Execute+ </Actions> </Output> </Event>

%%% Cabin actuator: activate slow motor  
<Event name="c_slw"> <Output> <Priority val="100"/> <Actions> "pimg_outputs[0] |= (1&lt;&lt;2)" +Execute+ </Actions> </Output> </Event>

%%% Cabin actuator: deactivate slow motor  
<Event name="c_fst"> <Output> <Priority val="100"/> <Actions> "pimg_outputs[0] &amp;= ~(1&lt;&lt;2)" +Execute+ </Actions> </Output> </Event>

%%% Door actuator: start motor floor 0 to open door
<Event name="d0_op"> <Output> <Priority val="100"/> <Actions> "{pimg_outputs[0] &amp;= ~(1&lt;&lt;4); pimg_outputs[0] |= (1&lt;&lt;3);}" +Execute+ </Actions> </Output> </Event>

%%% Door actuator: start motor floor 0 to close door
<Event name="d0_cl"> <Output> <Priority val="100"/> <Actions> "{pimg_outputs[0] &amp;= ~(1&lt;&lt;3); pimg_outputs[0] |= (1&lt;&lt;4);}" +Execute+ </Actions> </Output> </Event>

%%% Door actuator: stop motor floor 0 
<Event name="d0_stp"> <Output> <Priority val="100"/> <Actions>  "pimg_outputs[0] &amp;= ~((1&lt;&lt;3) | (1&lt;&lt;4))" +Execute+ </Actions> </Output> </Event>

%%% Door actuator: start motor floor 1 to open door
<Event name="d1_op"> <Output> <Priority val="100"/> <Actions> "{pimg_outputs[0] &amp;= ~(1&lt;&lt;6); pimg_outputs[0] |= (1&lt;&lt;5);}" +Execute+ </Actions> </Output> </Event>

%%% Door actuator: start motor floor 1 to close door
<Event name="d1_cl"> <Output> <Priority val="100"/> <Actions> "{pimg_outputs[0] &amp;= ~(1&lt;&lt;5); pimg_outputs[0] |= (1&lt;&lt;6);}" +Execute+ </Actions> </Output> </Event>

%%% Door actuator: stop motor floor 1 
<Event name="d1_stp"> <Output> <Priority val="100"/> <Actions> "pimg_outputs[0] &amp;= ~((1&lt;&lt;5) | (1&lt;&lt;6))" +Execute+ </Actions> </Output> </Event>

%%% Door actuator: start motor floor 2 to open door
<Event name="d2_op"> <Output> <Priority val="100"/> <Actions> "{pimg_outputs[1] &amp;= ~(1&lt;&lt;0); pimg_outputs[0] |= (1&lt;&lt;7);}" +Execute+ </Actions> </Output> </Event>

%%% Door actuator: start motor floor 2 to close door
<Event name="d2_cl"> <Output> <Priority val="100"/> <Actions> "{pimg_outputs[0] &amp;= ~(1&lt;&lt;7); pimg_outputs[1] |= (1&lt;&lt;0);}" +Execute+ </Actions> </Output> </Event>

%%% Door actuator: stop motor floor 2 
<Event name="d2_stp"> <Output> <Priority val="100"/> <Actions>  "{pimg_outputs[0] &amp;= ~(1&lt;&lt;7); pimg_outputs[1] &amp;= ~(1&lt;&lt;0);}" +Execute+ </Actions> </Output> </Event>

%%% Operator actuator: illuminate call button upstairs floor 0
<Event name="l0_upon"> <Output> <Priority val="100"/> <Actions> "pimg_outputs[1] |= (1&lt;&lt;1)" +Execute+ </Actions> </Output> </Event>

%%% Operator actuator: turn off light for call button upstairs floor 0
<Event name="l0_upoff"> <Output> <Priority val="100"/> <Actions>  "pimg_outputs[1] &amp;= ~(1&lt;&lt;1)" +Execute+ </Actions> </Output> </Event>

%%% Operator actuator: illuminate call button downstairs floor 2
<Event name="l2_downon"> <Output> <Priority val="100"/> <Actions> "pimg_outputs[1] |= (1&lt;&lt;4)" +Execute+ </Actions> </Output> </Event>

%%% Operator actuator: turn off light for call button downstairs floor 2
<Event name="l2_downoff"> <Output> <Priority val="100"/> <Actions> "pimg_outputs[1] &amp;= ~(1&lt;&lt;4)" +Execute+ </Actions> </Output> </Event>



% timer event: door delay
<Event name="dtick"> 
<Internal> 
<Priority val="100"/> 
<Timer val="50ftu">  % 1ftu <> 10ms 
<ResetEvents> d0_cl d1_cl d2_cl </ResetEvents>
<StartEvents> d0_cl d1_cl d2_cl </StartEvents>
<StopEvents/>
</Timer>
</Internal> 
</Event>

% timer event: blink delay
<Event name="btick"> 
<Internal> 
<Priority val="100"/> 
<Timer val="100ftu">  % 1ftu <> 10ms 
<ResetEvents> l0_upon l0_upoff l2_downon l2_downoff </ResetEvents>
<StartEvents> l0_upon l0_upoff l2_downon l2_downoff </StartEvents>
<StopEvents/>
</Timer>
</Internal> 
</Event>

</EventConfiguration>


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
% 3. Target configuration parameters

<TargetConfiguration>

% Sensible code options for 32bit C device
<Prefix val="fcg"/>
<WordType val="uint32_t"/>
<WordSize val="32" />
<IntegerType val="int16_t"/>
<IntegerSize val="16"/>
<ArrayForBitarray val="true"/>
<BisectionForBitArray val="true"/>
<ArrayForBitmasks val="true"/>
<BitAddressArithmetic val="true"/>
<ArrayForTransitions  val="true"/>
<LoopPendingInputs val="true"/>
<StrictEventSynchronisation val="false"/>


% Additional code: include headers
<IncludeBefore>
<![CDATA[
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <inttypes.h>
#include <unistd.h>
#include <sys/time.h>
   
// additional WAGO IPC functions libwpc
extern int kbus_init(void);
extern void start_kbus_thread(void);   
extern int kbus_running(void);   
extern void *kbus_lock_input_image(void);
extern void *kbus_lock_output_image(void);
extern void kbus_release_io_image(void);

// process image
uint8_t pimg_inputs[4];
uint8_t pimg_outputs[4];     

]]>
</IncludeBefore>

% Additional target code: main loop
<IncludeAfter>
<![CDATA[
   
   
/* main loop (minimalistic variant) */ 
int main(void) {
  // system time as 32bit 
  int32_t systime32;
  struct timeval recent_tod;
  int32_t recent_mon;     
  int32_t recent_dec;     
  int blink; 
  // clear images    
  int i; 
  for(i=0; i<4;++i) pimg_inputs[i]=0;   
  for(i=0; i<4;++i) pimg_outputs[i]=0;    
  // start Kbus thread     
  int res = kbus_init();   
  if(res!=0) { 
    printf("WAGI IPC Device: Fatal Kbus Error: cannot initialise (!)\n");  
    exit(1);   
  }
  start_kbus_thread();     
  int cnt=30;  
  while((kbus_running()==0) && (cnt>0)) {    
    printf("WAGI IPC Device: Waiting for Kbus initialisation to complete to start up\n");    
    cnt--;     
    sleep(1);  
  }
  if(cnt==0) { 
    printf("WAGI IPC Device: Fatal Kbus Error: cannot initialise (!)\n");  
    exit(1);   
  }
  // initialise systime    
  gettimeofday(&recent_tod,0); 
  systime32=0; 
  recent_mon=0;
  recent_dec=0;   
  // do loop
  while(true) {
    // read process image inputs    
    static int failcnt=0;    
    char* wimg_inputs = kbus_lock_input_image();     
    if(kbus_running()==0) {  
      if(failcnt==0) printf("WAGI IPC Device: Fatal Kbus Error: cannot read (!)\n");     
      failcnt=50;
    } else {     
      if(failcnt>0) failcnt--;     
      if(failcnt==0) for(i=0; i<4;++i) pimg_inputs[i]=wimg_inputs[i];    
    }
    kbus_release_io_image();     
    // monitor
    if((systime32-recent_mon) >= 1000) {    
      recent_mon = systime32;    
      pimg_outputs[3] &= 0x3f;
      pimg_outputs[3] |= (1 << (6+(blink % 2)));
      blink++;   
    }
    // update ms systime     
    struct timeval nowtod;   
    gettimeofday(&nowtod,0); 
    int32_t dtsec = nowtod.tv_sec - recent_tod.tv_sec;    
    int32_t dtms = dtsec*1000 + (nowtod.tv_usec - recent_tod.tv_usec)/1000;
    if(dtms>0) { 
      recent_tod.tv_sec  +=  dtms /1000;     
      recent_tod.tv_usec += (dtms % 1000) *1000;   
      while(recent_tod.tv_usec > 1000000000) {     
        recent_tod.tv_usec-=1000000000;
        recent_tod.tv_sec+=1;    
      }    
      systime32 += dtms;  
    }
    // update timers
    if(systime32 - recent_dec > 10) {
      int16_t dtdec = (systime32 - recent_dec)/10;
      recent_dec += dtdec*10;
      fcg_timerdec(dtdec);
    }      
    // payload
    fcg_cyclic();
    // write process image outputs 
    char* wimg_outputs = kbus_lock_output_image();   
    for(i=0; i<4;++i) wimg_outputs[i]=pimg_outputs[i]; 
    kbus_release_io_image(); 
  }
  // should have this in a signal handler
  kbus_shutdown();   
}  
]]>
</IncludeAfter>

</TargetConfiguration>

</CodeGenerator>



