/** @file cgp_plcoxml.h @brief Code-generator PlcOpen XML (IEC 61131-3 ST) */

/*
  FAU Discrete Event Systems Library (libFAUDES)

  Copyright (C) 2010, 2016, 2017 Thomas Moor

*/



#ifndef FAUDES_PLCOXML_H
#define FAUDES_PLCOXML_H

#include "libfaudes.h"
#include "cgp_iec61131st.h"

using namespace faudes;



/**
 * @brief Target PlcOpen XML (IEC 61131-3 ST)
 *
 * This class is a specialisation of the Iec61131stCodeGenerator to generate code in the PlcOpen
 * XML format <a href="http://www.plcopen.org/pages/tc6_xml/downloads/tc6_xml_v201_technical_doc.pdf">[see also here]</a>.
 * The current status of this code generator backend is "experimental". The generated code complies with
 * the XML scheme (validated with xmlcopyeditor), it can be imported by TwinCAT, CodeSys, GEB IDE and
 * PLCopenEditor.
 *
 * In contrast to its base class, PlcoxmlCodeGenerator does not allow for the insertion of configuration code.
 * As a consequence, i/o is restricted to boolean variables, either symbolic marker or explicit i/o addresses.
 * More flexible approaches that integrate CompileDES generated code with the PlcOpen XML data model
 * are currently studied in an industrial application context.
 *
 *
 * The following code-options are supported.
 *
 * <strong>IecSchemeVersion</strong>. This option specifies the XML-scheme used for generating
 * output. Possible values are <tt>v1.01</tt> (dated late 2005) and <tt>v2.01</tt> (dated mid 2009).
 * For the code generated by CompileDES, this effects only the parameters for the outer XML-element
 * <tt>&lt;project&gt;</tt>. For recent code editors, version <tt>v2.01</tt> should be fine.
 * This is the default.
 *
 * @verbatim
   <IecSchemeVersion val="v2.01"/>
   @endverbatim
 *
 *
 * <strong>IecToolVendor</strong>. This option specifies the <tt>companyName</tt> attribute in the
 * PlcOpen XML file header. It defaults to <tt>FGDES/LRT</tt>.
 *
 * @verbatim
   <IecToolVendor val="FeelGood Inc."/>
   @endverbatim
 *
 *
 * <strong>IecContentAuthor</strong>, <strong>IecContentOrganization</strong>, <strong>IecContentVersion</strong>.
 * These options specify the respective attributes in the PCLopen XML content header. The default is
 * empty. We have experienced editors that insist in the <tt>version</tt> attribute to be set.
 *
 * @verbatim
   <IecContentAuthor val="James Brown"/>
   <IecContentOrganization val="Federal Records"/>
   <IecContentVersion val="stable"/>
   @endverbatim
 *
 *
 * <strong>IecTextElement</strong>. This option specifies the output format for plain text, i.e.,
 * IEC ST code and comments. The documentation indicates that any XHTML-formated text should be fine.
 * This includes plain ascii text with &lt;, &gt; and &amp; escaped. This is the default behaviour.
 * Setting this option to <tt>xhtml</tt> adds an outer XHTML element, as seen when exporting from
 * TwinCAT and CodeSys. Alternatively, setting the option to <tt>cdata</tt> uses a <tt>CDATA</tt> element
 * to emphasises preformated text, as seen when exporting with PLCopenEditor.
 *
 * @verbatim
   <IecTextElement val="cdata"/>
   @endverbatim
 *
 *
 * <strong>IMPORTANT NOTE</strong>. The current implementation does not validate user provided XML attributes.
 * They will be quoted in double quotes and not escaped whatsoever. Thus, attributes are effectively restricted to
 * plain ascii with no double quote and no indicator characters. A future implementation will have an appropriate
 * wrapper to format attributes.
 *
 *
 * @ingroup CGClasses
 */


class PlcoxmlCodeGenerator : public Iec61131stCodeGenerator  {

public:

  /*****************************************
   *****************************************
   *****************************************
   *****************************************/

  /** @name Basic Class Maintenance */
  /** @{ */
  /**
   * @brief Constructor
   */
  PlcoxmlCodeGenerator(void);

  /**
   * @brief Explicit destructor.
   */
  virtual ~PlcoxmlCodeGenerator(void);


  /**
   * @brief Clear all data.
   *
   */
  virtual void Clear(void);


  /** @} */

protected:

  /*! option: plcopen-xml version "v1.01" or "v2.01" */
  std::string mIecSchemeVersion;

  /*! option: xml entry file header "company" */
  std::string mIecToolVendor;

  /*! option: xml entry content header "author" */
  std::string mIecContentAuthor;

  /*! option: xml entry content header "company" */
  std::string mIecContentOrganization;

  /*! option: xml entry content header "version" */
  std::string mIecContentVersion;

  /*! option: plain text xml-element "cdata", "xhtml", or "pre" */
  std::string mIecTextElement;

  /*! code generation hook (overall) */
  void DoGenerate(void);

  /*! code generation hook (cyclic function) */
  void DoGenerateFunction(void);

  /*! code generation (cyclic function, interface) */
  void DoGenerateInterface(void);

  /*! code generation (cyclicg function, st body) */
  void DoGenerateBody(void);

  /*! code generation hook (symbolic name lookup functions) */
  void DoGenerateLookups(void);

  /* re-implement primitives (declarations) */
  virtual void VariableDeclare(const std::string& ladd, const std::string& ltype);
  virtual void VariableDeclare(const std::string& ladd, const std::string& ltype, const std::string& lval);
  virtual void CintarrayDeclare(const AA& address, int offset, const std::vector<int>& val);
  virtual void CwordarrayDeclare(const AA& address, int offset, const std::vector<word_t>& val);
  virtual void CstrarrayDeclare(const AA& address, int offset, const std::vector<std::string>& val);
  virtual void IntarrayDeclare(const AA& address, int offset, int len);
  virtual void IntarrayDeclare(const AA& address, int offset, const std::vector<int>& val);
  virtual void WordarrayDeclare(const AA& address, int offset, int len);
  virtual void WordarrayDeclare(const AA& address, int offset, const std::vector<word_t>& val);

  /* re-implement iec specific code snippets */
  virtual void DeclareImportPhysicalIo(void);

  /* xml spexcific helpers */
  virtual void XmlBeginPlainText();
  virtual void XmlEndPlainText();
  virtual void XmlDocumentation(const std::string& text);

  /**
   * @brief File i/o
   *
   * Reads global configuration from TokenReader, excl. label
   *
   * @param rTr
   *   TokenReader to read from
   *
   * @exception Exception
   *   - token mismatch (id 502)
   *   - IO error (id 1)
   */
  virtual void DoReadTargetConfiguration(TokenReader& rTr);
 
  /**
   * @brief File i/o
   *
   * Write global configuration to TokenWriter, excl. label
   *
   * @param rTw
   *   Reference to TokenWriter
   *
   * @exception Exception 
   *   - IO errors (id 2)
   */
  virtual void DoWriteTargetConfiguration(TokenWriter& rTw) const;

};


#endif
