/* rti2code: autogenerated libFAUDES rti registration: libFAUDES 2.29d timed-iodevice-simulator */

namespace faudes {
/* Auto-register faudes types */
AutoRegisterType<Alphabet> gRti1RegisterAlphabet("Alphabet");
AutoRegisterXElementTag<Alphabet> gRti1XElementTagAlphabet("Alphabet", "Event");
AutoRegisterType<xDevice> gRti5RegisterDeviceContainer("DeviceContainer");
AutoRegisterType<EventSet> gRti7RegisterEventSet("EventSet");
AutoRegisterXElementTag<EventSet> gRti7XElementTagEventSet("EventSet", "Event");
AutoRegisterType<EventSetVector> gRti8RegisterEventSetVector("EventSetVector");
AutoRegisterType<Generator> gRti9RegisterGenerator("Generator");
AutoRegisterType<GeneratorVector> gRti10RegisterGeneratorVector("GeneratorVector");
AutoRegisterType<ProductCompositionMap> gRti16RegisterProductCompositionMap("ProductCompositionMap");
AutoRegisterType<sEventSet> gRti20RegisterSimulationAlphabet("SimulationAlphabet");
AutoRegisterXElementTag<sEventSet> gRti20XElementTagSimulationAlphabet("SimulationAlphabet", "Event");
AutoRegisterType<SimConditionSet> gRti21RegisterSimulationConditions("SimulationConditions");
AutoRegisterXElementTag<SimConditionSet> gRti21XElementTagSimulationConditions("SimulationConditions", "Condition");
AutoRegisterType<StateSet> gRti23RegisterStateSet("StateSet");
AutoRegisterXElementTag<StateSet> gRti23XElementTagStateSet("StateSet", "State");
AutoRegisterType<System> gRti25RegisterSystem("System");
AutoRegisterType<SystemVector> gRti26RegisterSystemVector("SystemVector");
AutoRegisterType<TransSet> gRti27RegisterTransSet("TransSet");
AutoRegisterXElementTag<TransSet> gRti27XElementTagTransSet("TransSet", "Tr");
} // namespace
namespace faudes {
/* Register faudes types */
void LoadRegisteredTypes(void) {
  TypeRegistry::G()->Insert<Alphabet>("Alphabet");
  TypeRegistry::G()->Insert<Boolean>("Boolean");
  TypeRegistry::G()->Insert<xDevice>("DeviceContainer");
  TypeRegistry::G()->Insert<DeviceExecutor>("DeviceExecutor");
  TypeRegistry::G()->Insert<EventSet>("EventSet");
  TypeRegistry::G()->Insert<EventSetVector>("EventSetVector");
  TypeRegistry::G()->Insert<Generator>("Generator");
  TypeRegistry::G()->Insert<GeneratorVector>("GeneratorVector");
  TypeRegistry::G()->Insert<Integer>("Integer");
  TypeRegistry::G()->Insert<IntegerVector>("IntegerVector");
  TypeRegistry::G()->Insert<LoggingExecutor>("LoggingExecutor");
  TypeRegistry::G()->Insert<ParallelExecutor>("ParallelExecutor");
  TypeRegistry::G()->Insert<ProductCompositionMap>("ProductCompositionMap");
  TypeRegistry::G()->Insert<ProposingExecutor>("ProposingExecutor");
  TypeRegistry::G()->Insert<sEventSet>("SimulationAlphabet");
  TypeRegistry::G()->Insert<SimConditionSet>("SimulationConditions");
  TypeRegistry::G()->Insert<StateSet>("StateSet");
  TypeRegistry::G()->Insert<String>("String");
  TypeRegistry::G()->Insert<System>("System");
  TypeRegistry::G()->Insert<SystemVector>("SystemVector");
  TypeRegistry::G()->Insert<TransSet>("TransSet");
}
} // namespace
namespace faudes {
/* Register faudes functions */
void LoadRegisteredFunctions(void) {
  FunctionRegistry::G()->Insert<Rti0Accessible>("Accessible");
  FunctionRegistry::G()->Insert<Rti1SetDifference>("AlphabetDifference");
  FunctionRegistry::G()->Insert<Rti2SetEquality>("AlphabetEquality");
  FunctionRegistry::G()->Insert<Rti3AlphabetExtract>("AlphabetExtract");
  FunctionRegistry::G()->Insert<Rti4SetInclusion>("AlphabetInclusion");
  FunctionRegistry::G()->Insert<Rti5SetIntersection>("AlphabetIntersection");
  FunctionRegistry::G()->Insert<Rti6AlphabetLanguage>("AlphabetLanguage");
  FunctionRegistry::G()->Insert<Rti7SetUnion>("AlphabetUnion");
  FunctionRegistry::G()->Insert<Rti8Automaton>("Automaton");
  FunctionRegistry::G()->Insert<Rti9Coaccessible>("Coaccessible");
  FunctionRegistry::G()->Insert<Rti10Complete>("Complete");
  FunctionRegistry::G()->Insert<Rti11aDeterministic>("Deterministic");
  FunctionRegistry::G()->Insert<Rti12EmptyLanguage>("EmptyLanguage");
  FunctionRegistry::G()->Insert<Rti13EmptyStringLanguage>("EmptyStringLanguage");
  FunctionRegistry::G()->Insert<Rti14FullLanguage>("FullLanguage");
  FunctionRegistry::G()->Insert<Rti15IntegerSum>("IntegerSum");
  FunctionRegistry::G()->Insert<Rti16aInvProject>("InvProject");
  FunctionRegistry::G()->Insert<Rti17IsAccessible>("IsAccessible");
  FunctionRegistry::G()->Insert<Rti18IsCoaccessible>("IsCoaccessible");
  FunctionRegistry::G()->Insert<Rti19IsComplete>("IsComplete");
  FunctionRegistry::G()->Insert<Rti20IsDeterministic>("IsDeterministic");
  FunctionRegistry::G()->Insert<Rti21IsEmptyLanguage>("IsEmptyLanguage");
  FunctionRegistry::G()->Insert<Rti22IsNonblocking>("IsNonblocking");
  FunctionRegistry::G()->Insert<Rti23IsOmegaClosed>("IsOmegaClosed");
  FunctionRegistry::G()->Insert<Rti24IsOmegaTrim>("IsOmegaTrim");
  FunctionRegistry::G()->Insert<Rti25IsPrefixClosed>("IsPrefixClosed");
  FunctionRegistry::G()->Insert<Rti26IsTrim>("IsTrim");
  FunctionRegistry::G()->Insert<Rti27KleeneClosure>("KleeneClosure");
  FunctionRegistry::G()->Insert<Rti28LanguageComplement>("LanguageComplement");
  FunctionRegistry::G()->Insert<Rti29LanguageConcatenate>("LanguageConcatenate");
  FunctionRegistry::G()->Insert<Rti30LanguageDifference>("LanguageDifference");
  FunctionRegistry::G()->Insert<Rti31LanguageDisjoint>("LanguageDisjoint");
  FunctionRegistry::G()->Insert<Rti32LanguageEquality>("LanguageEquality");
  FunctionRegistry::G()->Insert<Rti33LanguageInclusion>("LanguageInclusion");
  FunctionRegistry::G()->Insert<Rti34LanguageIntersection>("LanguageIntersection");
  FunctionRegistry::G()->Insert<Rti35LanguageUnion>("LanguageUnion");
  FunctionRegistry::G()->Insert<Rti36MarkAllStates>("MarkAllStates");
  FunctionRegistry::G()->Insert<Rti37OmegaClosure>("OmegaClosure");
  FunctionRegistry::G()->Insert<Rti38aOmegaParallel>("OmegaParallel");
  FunctionRegistry::G()->Insert<Rti39aOmegaProduct>("OmegaProduct");
  FunctionRegistry::G()->Insert<Rti40OmegaTrim>("OmegaTrim");
  FunctionRegistry::G()->Insert<Rti41aParallel>("Parallel");
  FunctionRegistry::G()->Insert<Rti42PrefixClosure>("PrefixClosure");
  FunctionRegistry::G()->Insert<Rti43aProduct>("Product");
  FunctionRegistry::G()->Insert<Rti44aProject>("Project");
  FunctionRegistry::G()->Insert<Rti45SelfLoop>("SelfLoop");
  FunctionRegistry::G()->Insert<Rti46aStateMin>("StateMin");
  FunctionRegistry::G()->Insert<Rti47Trim>("Trim");
  FunctionRegistry::G()->Insert<Rti48UniqueInit>("UniqueInit");
}
} // namespace
